#!/bin/bash
# Serein Command-Line Tool

# --- Helper Functions ---
# Displays an informational message.
info() {
    echo -e "\033[1;34m[INFO]\033[0m $1"
}

# Displays an error message and exits the script.
error() {
    echo -e "\033[1;31m[ERROR]\033[0m $1" >&2
    exit 1
}

# --- Command Definitions ---
COMMANDS=(
    "update [stable|edge]    Update system and Serein configs"
    "rollback <generation>   Rollback to a previous generation"
    "rollback list           List available generations"
    "rollback remove <gen>   Remove a specific generation"
    "enable overview         Enable the Hyprland overview plugin"
    "disable overview        Disable the Hyprland overview plugin"
    "detect-nvidia           Automatically configure NVIDIA settings"
    "uninstall               Remove the Serein environment"
)

# Displays the usage message.
usage() {
    echo "Usage: serein [command] [options]"
    echo ""
    echo "Available commands:"
    for cmd in "${COMMANDS[@]}"; do
        printf "  %-25s %s\n" "${cmd%% *}" "${cmd#* }"
    done
    exit 1
}

# --- Main Logic ---
# This is the main logic of the script.
if ! command -v rsync &> /dev/null; then
    error "rsync is not installed. Please install it to continue."
fi

if [ -z "$1" ]; then
    usage
fi

case "$1" in
    update)
        persistent_dir="$HOME/.cache/serein"
        if [ ! -d "$persistent_dir" ] || [ ! -d "$persistent_dir/.git" ]; then
            error "Serein not installed persistently. Cannot update."
        fi

        # Update based on flag
        pushd "$persistent_dir" >/dev/null
            if [ "$2" == "stable" ]; then
                info "Updating to the latest stable release..."
                if ! git fetch --tags; then
                    error "git fetch failed. Please check your internet connection and repository status."
                fi
                latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
                if ! git checkout "$latest_tag"; then
                    error "git checkout failed. You may have local changes. Please stash or commit them first."
                fi
            else
                info "Updating to the bleeding edge (git pull)..."
                if ! git pull; then
                    error "git pull failed. You may have local changes. Please stash or commit them first."
                fi
            fi
        popd >/dev/null

        # Create generation backup
        generation_dir="$persistent_dir/generations"
        mkdir -p "$generation_dir"
        last_gen_num=$(find "$generation_dir" -type d -name "Generation-*" | sed -e 's/.*Generation-//' -e 's/-.*//' | sort -n | tail -n 1)
        if [ -z "$last_gen_num" ]; then
            generation_num=1
        else
            generation_num=$((last_gen_num + 1))
        fi
        backup_dir="$generation_dir/Generation-$generation_num-$(date +%Y-%m-%d)"
        info "Creating generation backup at $backup_dir..."
        rsync -a --exclude='.git' --exclude='.gitignore' --exclude='generations' "$persistent_dir/" "$backup_dir/"

        # Unsymlink configs
        "$persistent_dir/functions/resymlink.sh" --unsymlink

        # Resymlink configs
        "$persistent_dir/functions/resymlink.sh" --symlink

        info "Update complete. A new generation has been created."
        ;;
    rollback)
        persistent_dir="$HOME/.cache/serein"
        generation_dir="$persistent_dir/generations"

        if [ "$2" == "list" ]; then
            info "Available generations:"
            ls -1 "$generation_dir"
            exit 0
        fi

        if [ "$2" == "remove" ]; then
            if [ -z "$3" ]; then
                usage
            fi
            target_generation="$generation_dir/$3"
            if [ ! -d "$target_generation" ]; then
                error "Generation '$3' not found."
            fi
            read -rp "Are you sure you want to remove generation $3? This is irreversible. [y/N]: " confirm
            if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
                info "Removal cancelled."
                exit 0
            fi
            rm -rf "$target_generation"
            info "Generation $3 removed."
            exit 0
        fi

        if [ -z "$2" ]; then
            usage
        fi

        target_generation="$generation_dir/$2"
        if [ ! -d "$target_generation" ]; then
            error "Generation '$2' not found."
        fi

        read -rp "Are you sure you want to roll back to generation $2? [y/N]: " confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            info "Rollback cancelled."
            exit 0
        fi

        info "Rolling back to generation $2..."
        
        # Unsymlink configs
        "$persistent_dir/functions/resymlink.sh" --unsymlink

        # Restore from backup
        rsync -a --delete "$target_generation/" "$persistent_dir/"

        # Resymlink configs
        "$persistent_dir/functions/resymlink.sh" --symlink

        info "Rollback complete."
        ;;
    enable)
        if [ "$2" == "overview" ]; then
            info "Enabling hyprtasking (required for overview)..."
            hyprpm update
            hyprpm add https://github.com/raybbian/hyprtasking
            hyprpm enable hyprtasking
            hyprpm reload -nn
            hyprctl reload
            info "Hyprtasking enabled."
        else
            usage
        fi
        ;;
    disable)
        if [ "$2" == "overview" ]; then
            info "Disabling hyprtasking..."
            hyprpm remove https://github.com/raybbian/hyprtasking
            hyprpm reload -nn
            hyprctl reload
            info "Hyprtasking disabled."
        else
            usage
        fi
        ;;
    detect-nvidia)
        if ! command -v lspci &> /dev/null; then
            error "lspci not found. Please install it to continue."
        fi
        if lspci | grep -i nvidia > /dev/null; then
            info "NVIDIA GPU detected. Enabling NVIDIA settings..."
            sed -i 's/#env = GBM_BACKEND,nvidia-drm/env = GBM_BACKEND,nvidia-drm/' $HOME/.config/hypr/hyprconfs/env.conf
            sed -i 's/#env = LIBVA_DRIVER_NAME,nvidia/env = LIBVA_DRIVER_NAME,nvidia/' $HOME/.config/hypr/hyprconfs/env.conf
            sed -i 's/#env = __GLX_VENDOR_LIBRARY_NAME,nvidia/env = __GLX_VENDOR_LIBRARY_NAME,nvidia/' $HOME/.config/hypr/hyprconfs/env.conf
            sed -i 's/#env = ELECTRON_OZONE_PLATFORM_HINT,auto/env = ELECTRON_OZONE_PLATFORM_HINT,auto/' $HOME/.config/hypr/hyprconfs/env.conf
            sed -i 's/#env = NVD_BACKEND,direct/env = NVD_BACKEND,direct/' $HOME/.config/hypr/hyprconfs/env.conf
        else
            info "No NVIDIA GPU detected. Disabling NVIDIA settings..."
            sed -i 's/env = GBM_BACKEND,nvidia-drm/#env = GBM_BACKEND,nvidia-drm/' $HOME/.config/hypr/hyprconfs/env.conf
            sed -i 's/env = LIBVA_DRIVER_NAME,nvidia/#env = LIBVA_DRIVER_NAME,nvidia/' $HOME/.config/hypr/hyprconfs/env.conf
            sed -i 's/env = __GLX_VENDOR_LIBRARY_NAME,nvidia/#env = __GLX_VENDOR_LIBRARY_NAME,nvidia/' $HOME/.config/hypr/hyprconfs/env.conf
            sed -i 's/env = ELECTRON_OZONE_PLATFORM_HINT,auto/#env = ELECTRON_OZONE_PLATFORM_HINT,auto/' $HOME/.config/hypr/hyprconfs/env.conf
            sed -i 's/env = NVD_BACKEND,direct/#env = NVD_BACKEND,direct/' $HOME/.config/hypr/hyprconfs/env.conf
        fi
        ;;
    uninstall)
        read -rp "Are you sure you want to uninstall Serein? This will remove all configurations and the serein command. [y/N]: " confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            info "Uninstallation cancelled."
            exit 0
        fi
        info "Uninstalling Serein..."
        persistent_dir="$HOME/.cache/serein"
        if [ -d "$persistent_dir" ]; then
            "$persistent_dir/functions/resymlink.sh" --unsymlink
            sudo rm /usr/local/bin/serein
            rm -rf "$persistent_dir"
            info "Serein has been uninstalled."
        else
            error "Serein is not installed persistently."
        fi
        ;;
    *)
        usage
        ;;
esac
